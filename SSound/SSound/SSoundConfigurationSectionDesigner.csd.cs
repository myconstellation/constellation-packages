//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SSound
{
    
    
    /// <summary>
    /// The SSoundConfigurationSection Configuration Section.
    /// </summary>
    public partial class SSoundConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SSoundConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string SSoundConfigurationSectionSectionName = "ssoundConfiguration";
        
        /// <summary>
        /// The XML path of the SSoundConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string SSoundConfigurationSectionSectionPath = "ssoundConfiguration";
        
        /// <summary>
        /// Gets the SSoundConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public static global::SSound.SSoundConfigurationSection Instance
        {
            get
            {
                return ((global::SSound.SSoundConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::SSound.SSoundConfigurationSection.SSoundConfigurationSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.SSoundConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::SSound.SSoundConfigurationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region EndpointName Property
        /// <summary>
        /// The XML name of the <see cref="EndpointName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string EndpointNamePropertyName = "endpointName";
        
        /// <summary>
        /// Gets or sets the EndpointName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The EndpointName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.SSoundConfigurationSection.EndpointNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string EndpointName
        {
            get
            {
                return ((string)(base[global::SSound.SSoundConfigurationSection.EndpointNamePropertyName]));
            }
            set
            {
                base[global::SSound.SSoundConfigurationSection.EndpointNamePropertyName] = value;
            }
        }
        #endregion
        
        #region EnableDlnaRenderer Property
        /// <summary>
        /// The XML name of the <see cref="EnableDlnaRenderer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string EnableDlnaRendererPropertyName = "enableDlnaRenderer";
        
        /// <summary>
        /// Gets or sets the EnableDlnaRenderer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The EnableDlnaRenderer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.SSoundConfigurationSection.EnableDlnaRendererPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool EnableDlnaRenderer
        {
            get
            {
                return ((bool)(base[global::SSound.SSoundConfigurationSection.EnableDlnaRendererPropertyName]));
            }
            set
            {
                base[global::SSound.SSoundConfigurationSection.EnableDlnaRendererPropertyName] = value;
            }
        }
        #endregion
        
        #region InitialVolume Property
        /// <summary>
        /// The XML name of the <see cref="InitialVolume"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string InitialVolumePropertyName = "initialVolume";
        
        /// <summary>
        /// Gets or sets the InitialVolume.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The InitialVolume.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.SSoundConfigurationSection.InitialVolumePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=-1.0)]
        public virtual double InitialVolume
        {
            get
            {
                return ((double)(base[global::SSound.SSoundConfigurationSection.InitialVolumePropertyName]));
            }
            set
            {
                base[global::SSound.SSoundConfigurationSection.InitialVolumePropertyName] = value;
            }
        }
        #endregion
        
        #region OutputDeviceName Property
        /// <summary>
        /// The XML name of the <see cref="OutputDeviceName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string OutputDeviceNamePropertyName = "outputDeviceName";
        
        /// <summary>
        /// Gets or sets the OutputDeviceName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The OutputDeviceName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.SSoundConfigurationSection.OutputDeviceNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string OutputDeviceName
        {
            get
            {
                return ((string)(base[global::SSound.SSoundConfigurationSection.OutputDeviceNamePropertyName]));
            }
            set
            {
                base[global::SSound.SSoundConfigurationSection.OutputDeviceNamePropertyName] = value;
            }
        }
        #endregion
        
        #region SpeechVolume Property
        /// <summary>
        /// The XML name of the <see cref="SpeechVolume"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string SpeechVolumePropertyName = "speechVolume";
        
        /// <summary>
        /// Gets or sets the SpeechVolume.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The SpeechVolume.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.SSoundConfigurationSection.SpeechVolumePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=-1.0)]
        public virtual double SpeechVolume
        {
            get
            {
                return ((double)(base[global::SSound.SSoundConfigurationSection.SpeechVolumePropertyName]));
            }
            set
            {
                base[global::SSound.SSoundConfigurationSection.SpeechVolumePropertyName] = value;
            }
        }
        #endregion
        
        #region Inputs Property
        /// <summary>
        /// The XML name of the <see cref="Inputs"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string InputsPropertyName = "inputs";
        
        /// <summary>
        /// Gets or sets the Inputs.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Inputs.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.SSoundConfigurationSection.InputsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::SSound.InputDeviceCollection Inputs
        {
            get
            {
                return ((global::SSound.InputDeviceCollection)(base[global::SSound.SSoundConfigurationSection.InputsPropertyName]));
            }
            set
            {
                base[global::SSound.SSoundConfigurationSection.InputsPropertyName] = value;
            }
        }
        #endregion
        
        #region Cerevoice Property
        /// <summary>
        /// The XML name of the <see cref="Cerevoice"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string CerevoicePropertyName = "cerevoice";
        
        /// <summary>
        /// Gets or sets the Cerevoice.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Cerevoice.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.SSoundConfigurationSection.CerevoicePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::SSound.CerevoiceElement Cerevoice
        {
            get
            {
                return ((global::SSound.CerevoiceElement)(base[global::SSound.SSoundConfigurationSection.CerevoicePropertyName]));
            }
            set
            {
                base[global::SSound.SSoundConfigurationSection.CerevoicePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SSound
{
    
    
    /// <summary>
    /// The InputDeviceElement Configuration Element.
    /// </summary>
    public partial class InputDeviceElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.InputDeviceElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::SSound.InputDeviceElement.NamePropertyName]));
            }
            set
            {
                base[global::SSound.InputDeviceElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region InputDeviceName Property
        /// <summary>
        /// The XML name of the <see cref="InputDeviceName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string InputDeviceNamePropertyName = "inputDeviceName";
        
        /// <summary>
        /// Gets or sets the InputDeviceName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The InputDeviceName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.InputDeviceElement.InputDeviceNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string InputDeviceName
        {
            get
            {
                return ((string)(base[global::SSound.InputDeviceElement.InputDeviceNamePropertyName]));
            }
            set
            {
                base[global::SSound.InputDeviceElement.InputDeviceNamePropertyName] = value;
            }
        }
        #endregion
        
        #region HasSignalDuration Property
        /// <summary>
        /// The XML name of the <see cref="HasSignalDuration"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string HasSignalDurationPropertyName = "hasSignalDuration";
        
        /// <summary>
        /// Gets or sets the HasSignalDuration.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The HasSignalDuration.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.InputDeviceElement.HasSignalDurationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=2000)]
        public virtual int HasSignalDuration
        {
            get
            {
                return ((int)(base[global::SSound.InputDeviceElement.HasSignalDurationPropertyName]));
            }
            set
            {
                base[global::SSound.InputDeviceElement.HasSignalDurationPropertyName] = value;
            }
        }
        #endregion
        
        #region NoSignalDuration Property
        /// <summary>
        /// The XML name of the <see cref="NoSignalDuration"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string NoSignalDurationPropertyName = "noSignalDuration";
        
        /// <summary>
        /// Gets or sets the NoSignalDuration.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The NoSignalDuration.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.InputDeviceElement.NoSignalDurationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=30000)]
        public virtual int NoSignalDuration
        {
            get
            {
                return ((int)(base[global::SSound.InputDeviceElement.NoSignalDurationPropertyName]));
            }
            set
            {
                base[global::SSound.InputDeviceElement.NoSignalDurationPropertyName] = value;
            }
        }
        #endregion
        
        #region BufferMilliseconds Property
        /// <summary>
        /// The XML name of the <see cref="BufferMilliseconds"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string BufferMillisecondsPropertyName = "bufferMilliseconds";
        
        /// <summary>
        /// Gets or sets the BufferMilliseconds.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The BufferMilliseconds.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.InputDeviceElement.BufferMillisecondsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=25)]
        public virtual int BufferMilliseconds
        {
            get
            {
                return ((int)(base[global::SSound.InputDeviceElement.BufferMillisecondsPropertyName]));
            }
            set
            {
                base[global::SSound.InputDeviceElement.BufferMillisecondsPropertyName] = value;
            }
        }
        #endregion
        
        #region SignalThreshold Property
        /// <summary>
        /// The XML name of the <see cref="SignalThreshold"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string SignalThresholdPropertyName = "signalThreshold";
        
        /// <summary>
        /// Gets or sets the SignalThreshold.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The SignalThreshold.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.InputDeviceElement.SignalThresholdPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=5.0)]
        public virtual double SignalThreshold
        {
            get
            {
                return ((double)(base[global::SSound.InputDeviceElement.SignalThresholdPropertyName]));
            }
            set
            {
                base[global::SSound.InputDeviceElement.SignalThresholdPropertyName] = value;
            }
        }
        #endregion
        
        #region AutoPlay Property
        /// <summary>
        /// The XML name of the <see cref="AutoPlay"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string AutoPlayPropertyName = "autoPlay";
        
        /// <summary>
        /// Gets or sets the AutoPlay.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The AutoPlay.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.InputDeviceElement.AutoPlayPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public virtual bool AutoPlay
        {
            get
            {
                return ((bool)(base[global::SSound.InputDeviceElement.AutoPlayPropertyName]));
            }
            set
            {
                base[global::SSound.InputDeviceElement.AutoPlayPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SSound
{
    
    
    /// <summary>
    /// A collection of InputDeviceElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::SSound.InputDeviceElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::SSound.InputDeviceCollection.InputDeviceElementPropertyName)]
    public partial class InputDeviceCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::SSound.InputDeviceElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string InputDeviceElementPropertyName = "device";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override string ElementName
        {
            get
            {
                return global::SSound.InputDeviceCollection.InputDeviceElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::SSound.InputDeviceCollection.InputDeviceElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::SSound.InputDeviceElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::SSound.InputDeviceElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::SSound.InputDeviceElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::SSound.InputDeviceElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::SSound.InputDeviceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SSound.InputDeviceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::SSound.InputDeviceElement this[int index]
        {
            get
            {
                return ((global::SSound.InputDeviceElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::SSound.InputDeviceElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SSound.InputDeviceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::SSound.InputDeviceElement this[object name]
        {
            get
            {
                return ((global::SSound.InputDeviceElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::SSound.InputDeviceElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="device">The <see cref="global::SSound.InputDeviceElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public void Add(global::SSound.InputDeviceElement device)
        {
            base.BaseAdd(device);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::SSound.InputDeviceElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="device">The <see cref="global::SSound.InputDeviceElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public void Remove(global::SSound.InputDeviceElement device)
        {
            base.BaseRemove(this.GetElementKey(device));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::SSound.InputDeviceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SSound.InputDeviceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::SSound.InputDeviceElement GetItemAt(int index)
        {
            return ((global::SSound.InputDeviceElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::SSound.InputDeviceElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SSound.InputDeviceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public global::SSound.InputDeviceElement GetItemByKey(string name)
        {
            return ((global::SSound.InputDeviceElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SSound
{
    
    
    /// <summary>
    /// The CerevoiceElement Configuration Element.
    /// </summary>
    public partial class CerevoiceElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AccountID Property
        /// <summary>
        /// The XML name of the <see cref="AccountID"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string AccountIDPropertyName = "accountID";
        
        /// <summary>
        /// Gets or sets the AccountID.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The AccountID.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.CerevoiceElement.AccountIDPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string AccountID
        {
            get
            {
                return ((string)(base[global::SSound.CerevoiceElement.AccountIDPropertyName]));
            }
            set
            {
                base[global::SSound.CerevoiceElement.AccountIDPropertyName] = value;
            }
        }
        #endregion
        
        #region Password Property
        /// <summary>
        /// The XML name of the <see cref="Password"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string PasswordPropertyName = "password";
        
        /// <summary>
        /// Gets or sets the Password.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Password.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.CerevoiceElement.PasswordPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Password
        {
            get
            {
                return ((string)(base[global::SSound.CerevoiceElement.PasswordPropertyName]));
            }
            set
            {
                base[global::SSound.CerevoiceElement.PasswordPropertyName] = value;
            }
        }
        #endregion
        
        #region VoiceName Property
        /// <summary>
        /// The XML name of the <see cref="VoiceName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string VoiceNamePropertyName = "voiceName";
        
        /// <summary>
        /// Gets or sets the VoiceName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The VoiceName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.CerevoiceElement.VoiceNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string VoiceName
        {
            get
            {
                return ((string)(base[global::SSound.CerevoiceElement.VoiceNamePropertyName]));
            }
            set
            {
                base[global::SSound.CerevoiceElement.VoiceNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Bitrate Property
        /// <summary>
        /// The XML name of the <see cref="Bitrate"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        internal const string BitratePropertyName = "bitrate";
        
        /// <summary>
        /// Gets or sets the Bitrate.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.2")]
        [global::System.ComponentModel.DescriptionAttribute("The Bitrate.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SSound.CerevoiceElement.BitratePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=48000)]
        public virtual int Bitrate
        {
            get
            {
                return ((int)(base[global::SSound.CerevoiceElement.BitratePropertyName]));
            }
            set
            {
                base[global::SSound.CerevoiceElement.BitratePropertyName] = value;
            }
        }
        #endregion
    }
}
